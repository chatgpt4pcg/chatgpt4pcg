import Tesseract from 'tesseract.js';
import { convertToXML } from './converter/xml';
import { getBlocksWithPosition } from './converter/converter';
import wordsCount from 'words-count';

/**
 * 
 * @param imagePath absolute path to image 
 * @returns text and confidence level generated by Tesseract OCR
 */
export async function recognize(imagePath: string) {
  const { data: { text, confidence: c } } = await Tesseract.recognize(
    imagePath,
    'eng'
  )
  const confidence = c / 100
  return { text, confidence }
}

/**
 * 
 * @param text text containing `ab_drop` function calls
 * @returns a new string containing only the `ab_drop` function calls
 */
export function extractCode(text: string): string | null {
  const PATTERN = /```([^`]+)```/g;
  const CODE_PATTERN = /ab_drop\(['|"]b[1|3][1|3]['|"], *\d*\)/g;

  let match;
  let lastMatch = null;
  while ((match = PATTERN.exec(text)) !== null) {
    lastMatch = match;
  }
  if (!lastMatch) {
    return null
  }
  const code = lastMatch[0]
  const functionCode = code.matchAll(CODE_PATTERN)

  let output = ''
  for (const fn of functionCode) {
    output += fn.toString().replaceAll('"', "'") + '\n'
  }

  if (output.length === 0) {
    return null
  }

  return output.toLowerCase();
}

/**
 * 
 * @param text text to count words in
 * @returns a number of words in the text
 */
export function countWords(text: string): number {
  return wordsCount(text)
}

/**
 * 
 * @param text text of only `ab_drop()` functions to convert to XML
 * @returns XML file represents a level in the Science Birds
 */
export function convertTextToXML(text: string) {
  return convertToXML(text.toLowerCase())
}

/**
 * 
 * @param text text of only `ab_drop()` functions to convert to blocks
 * @returns an array of `Block`'s blocks with their positions on the grid
 */
export function convertTextToBlocks(text: string) {
  return getBlocksWithPosition(text.toLowerCase())
}